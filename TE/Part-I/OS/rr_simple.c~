#include<stdio.h>
#include<stdlib.h>

struct process {
	char pid[10];
	int bt;
	int TAT;
	int wt;
	int rt;
	int RQ_exit;
	int PAT;
};
struct process *proc = NULL;
int n, ts = 1, totalbt = 0, timer = 0;

void display()
{
	int i;
	for (i=0;i<n;i++) {
		printf("\n\nPID : %s\n", proc[i].pid);
		printf("\nBurst Time : %d\n\n", proc[i].bt);
	}
}

void gantt(int cp)
{
	int j, rqex = 0, proctimer = 0;
	while (timer < totalbt) {
		proctimer = 0;
		for (j=0;j<proc[cp].bt;j++) {
			if (proctimer == ts)
				break;
			printf("%s ", proc[cp].pid);
			++proctimer;
			++timer;
		}
		proc[cp].bt-=proctimer;
		printf(" |  ");
	}
}

int main()
{
	int i = 0;
	float avgTAT = 0, avgWT = 0, avgRT = 0;

	printf("\n\nEnter number of processes you want to create\n");
	scanf("%d", &n);
	proc = (struct process *)calloc(sizeof(struct process), n);
	printf("\nEnter time slice\n");
	scanf("%d", &ts);

	//Input for processes
	for(i=0;i<n;i++) {
		printf("\nEnter PID\n");
	        scanf("%s",proc[i].pid);
	        printf("\nEnter Burst time\n");
	        scanf("%d",&proc[i].bt);
	}

	//Calculate total burst
	for (i=0;i<n;i++)
		totalbt = totalbt + proc[i].bt;

	display();		//Display all inputs

	//Gantt chart
	for (i=0;i<n;i++) {
		if (proc[i].bt == 0)
			continue;
		gantt(i);
	}

	return 0;
}
